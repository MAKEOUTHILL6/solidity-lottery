{
  "address": "0x358dD937525B9306a22e5b8e4B015e2def77959B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        }
      ],
      "name": "Lottery__InvalidUpkeep",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getParticipantByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x275fabd7c6c234f8a4acb13d1a16ffb51cb0d321800639fc2f65c77a35e1ed56",
  "receipt": {
    "to": null,
    "from": "0x29E51F657cA0E7D1bd5B55f2dEbddc00BD8139d8",
    "contractAddress": "0x358dD937525B9306a22e5b8e4B015e2def77959B",
    "transactionIndex": 120,
    "gasUsed": "1215863",
    "logsBloom": "0x
    "blockHash": "0xc9e6318664050eb90abfe29d842648f47977e74a09829c98dea104ce366a3861",
    "transactionHash": "0x275fabd7c6c234f8a4acb13d1a16ffb51cb0d321800639fc2f65c77a35e1ed56",
    "logs": [],
    "blockNumber": 8097243,
    "cumulativeGasUsed": "20092392",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "7403",
    "300000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "86ba1ed6a25df275733d6c6b1ccaecb2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"}],\"name\":\"Lottery__InvalidUpkeep\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getParticipantByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Martin Atanasov\",\"details\":\"This smart contract implements Chainlink VRF V2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"in order to pick a new winner, all of the bools below should return true\"},\"performUpkeep(bytes)\":{\"details\":\"calls checkUpkeep and if it returns true, it selects a new winner\"}},\"title\":\"Lottery Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\n\\r\\nerror Lottery__NotEnoughETHEntered();\\r\\nerror Lottery__TransferFailed();\\r\\nerror Lottery__NotOpen();\\r\\nerror Lottery__InvalidUpkeep(\\r\\n    uint256 currentBalance,\\r\\n    uint256 numPlayers,\\r\\n    uint256 lotteryState\\r\\n);\\r\\n\\r\\n/**\\r\\n * @title Lottery Contract\\r\\n * @author Martin Atanasov\\r\\n * @dev This smart contract implements Chainlink VRF V2 and Chainlink Keepers\\r\\n */\\r\\n\\r\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\r\\n    // Types\\r\\n    enum LotteryState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    } // returns uint256 0 = OPEN, 1 = CALCULATING\\r\\n\\r\\n    // State Variables\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n    // Lottery Variables\\r\\n    address private s_recentWinner;\\r\\n    LotteryState private s_lotteryState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private immutable i_interval;\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable[] private s_participants;\\r\\n\\r\\n\\r\\n    // Events\\r\\n    event RaffleEnter(address indexed participant);\\r\\n    event RequestRaffleWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed winner);\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint256 entranceFee,\\r\\n        bytes32 gasLane,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_lotteryState = LotteryState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        // if makes up for better gas opt than require\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert Lottery__NotEnoughETHEntered();\\r\\n        }\\r\\n\\r\\n        if (s_lotteryState != LotteryState.OPEN) {\\r\\n            revert Lottery__NotOpen();\\r\\n        }\\r\\n\\r\\n        s_participants.push(payable(msg.sender));\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev in order to pick a new winner, all of the bools below should return true\\r\\n     */\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /*checkData*/\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        bool isOpen = (LotteryState.OPEN == s_lotteryState);\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n        bool hasPlayers = (s_participants.length > 0);\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n        return (upkeepNeeded, \\\"0x0\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev calls checkUpkeep and if it returns true, it selects a new winner\\r\\n     */\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n\\r\\n        if (!upkeepNeeded) {\\r\\n            revert Lottery__InvalidUpkeep(\\r\\n                address(this).balance,\\r\\n                s_participants.length,\\r\\n                uint256(s_lotteryState)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        s_lotteryState = LotteryState.CALCULATING;\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 /*requestId*/,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        uint256 indexOfWinner = randomWords[0] % s_participants.length;\\r\\n        address payable recentWinner = s_participants[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_lotteryState = LotteryState.OPEN;\\r\\n        s_participants = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        //send money to the winner\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        // require\\r\\n        if (!success) {\\r\\n            revert Lottery__TransferFailed();\\r\\n        }\\r\\n        emit WinnerPicked(recentWinner);\\r\\n    }\\r\\n\\r\\n    // View / Pure Functions\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n\\r\\n    function getParticipantByIndex(\\r\\n        uint256 index\\r\\n    ) public view returns (address) {\\r\\n        return s_participants[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getLotteryState() public view returns (LotteryState) {\\r\\n        return s_lotteryState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_participants.length;\\r\\n    }\\r\\n\\r\\n    function getLatestTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmations() public pure returns (uint256) {\\r\\n        return REQUEST_CONFIRMATIONS;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeabaef762b440c0689231636f51f67886cf0fa27414881c2c84a4859ef0e5c0e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200183c3803806200183c833981810160405281019062000038919062000293565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508461014081815250508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff166101008163ffffffff168152505060008060146101000a81548160ff021916908360018111156200010c576200010b6200032f565b5b0217905550426001819055508061012081815250505050505050506200035e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200015f8262000132565b9050919050565b620001718162000152565b81146200017d57600080fd5b50565b600081519050620001918162000166565b92915050565b6000819050919050565b620001ac8162000197565b8114620001b857600080fd5b50565b600081519050620001cc81620001a1565b92915050565b6000819050919050565b620001e781620001d2565b8114620001f357600080fd5b50565b6000815190506200020781620001dc565b92915050565b600067ffffffffffffffff82169050919050565b6200022c816200020d565b81146200023857600080fd5b50565b6000815190506200024c8162000221565b92915050565b600063ffffffff82169050919050565b6200026d8162000252565b81146200027957600080fd5b50565b6000815190506200028d8162000262565b92915050565b60008060008060008060c08789031215620002b357620002b26200012d565b5b6000620002c389828a0162000180565b9650506020620002d689828a01620001bb565b9550506040620002e989828a01620001f6565b9450506060620002fc89828a016200023b565b93505060806200030f89828a016200027c565b92505060a06200032289828a01620001bb565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161146e620003ce600039600081816102fa01526103e001526000818161082d01526108d60152600061068f0152600061066c0152600061064b0152600061060f0152600081816103200152610374015261146e6000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f5780636b68c03c116100595780636b68c03c146102375780636e04ff0d1461026257806391ad27b4146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf57806361b58b46146101fa576100c2565b806309bc33a7146100c75780631fe543e3146100f25780632cfcc5391461011b578063320229eb146101255780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bf8565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610dac565b61031e565b005b6101236103de565b005b34801561013157600080fd5b5061013a61054d565b6040516101479190610bf8565b60405180910390f35b34801561015c57600080fd5b5061017760048036038101906101729190610e63565b610557565b005b34801561018557600080fd5b5061018e610748565b60405161019b9190610ef1565b60405180910390f35b3480156101b057600080fd5b506101b9610771565b6040516101c69190610bf8565b60405180910390f35b3480156101db57600080fd5b506101e4610780565b6040516101f19190610bf8565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610f0c565b61078d565b60405161022e9190610ef1565b60405180910390f35b34801561024357600080fd5b5061024c6107d5565b6040516102599190610fb0565b60405180910390f35b34801561026e57600080fd5b5061028960048036038101906102849190611080565b6107eb565b604051610297929190611163565b60405180910390f35b3480156102ac57600080fd5b506102b56108d2565b6040516102c29190610bf8565b60405180910390f35b3480156102d757600080fd5b506102e06108fa565b6040516102ed9190610bf8565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c7929190611193565b60405180910390fd5b6103da8282610907565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610438576040517fec269fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561044c5761044b610f39565b5b600060149054906101000a900460ff16600181111561046e5761046d610f39565b5b146104a5576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600154905090565b6000610571604051806020016040528060008152506107eb565b509050806105e05747600280549050600060149054906101000a900460ff1660018111156105a2576105a1610f39565b5b6040517ff74a8f1f0000000000000000000000000000000000000000000000000000000081526004016105d7939291906111bc565b60405180910390fd5b6001600060146101000a81548160ff0219169083600181111561060657610605610f39565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106d095949392919061126b565b6020604051808303816000875af11580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071391906112d3565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600282815481106107a3576107a2611300565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060149054906101000a900460ff16905090565b6000606060008060149054906101000a900460ff16600181111561081257610811610f39565b5b6000600181111561082657610825610f39565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006001544261085a919061135e565b1190506000806002805490501190506000804711905083801561087a5750825b80156108835750815b801561088c5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600280549050905090565b60006002805490508260008151811061092357610922611300565b5b602002602001015161093591906113c1565b905060006002828154811061094d5761094c611300565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060146101000a81548160ff021916908360018111156109df576109de610f39565b5b0217905550600067ffffffffffffffff8111156109ff576109fe610c69565b5b604051908082528060200260200182016040528015610a2d5781602001602082028036833780820191505090505b5060029080519060200190610a43929190610b38565b504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a7190611423565b60006040518083038185875af1925050503d8060008114610aae576040519150601f19603f3d011682016040523d82523d6000602084013e610ab3565b606091505b5050905080610aee576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bb1579160200282015b82811115610bb05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b58565b5b509050610bbe9190610bc2565b5090565b5b80821115610bdb576000816000905550600101610bc3565b5090565b6000819050919050565b610bf281610bdf565b82525050565b6000602082019050610c0d6000830184610be9565b92915050565b6000604051905090565b600080fd5b600080fd5b610c3081610bdf565b8114610c3b57600080fd5b50565b600081359050610c4d81610c27565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ca182610c58565b810181811067ffffffffffffffff82111715610cc057610cbf610c69565b5b80604052505050565b6000610cd3610c13565b9050610cdf8282610c98565b919050565b600067ffffffffffffffff821115610cff57610cfe610c69565b5b602082029050602081019050919050565b600080fd5b6000610d28610d2384610ce4565b610cc9565b90508083825260208201905060208402830185811115610d4b57610d4a610d10565b5b835b81811015610d745780610d608882610c3e565b845260208401935050602081019050610d4d565b5050509392505050565b600082601f830112610d9357610d92610c53565b5b8135610da3848260208601610d15565b91505092915050565b60008060408385031215610dc357610dc2610c1d565b5b6000610dd185828601610c3e565b925050602083013567ffffffffffffffff811115610df257610df1610c22565b5b610dfe85828601610d7e565b9150509250929050565b600080fd5b60008083601f840112610e2357610e22610c53565b5b8235905067ffffffffffffffff811115610e4057610e3f610e08565b5b602083019150836001820283011115610e5c57610e5b610d10565b5b9250929050565b60008060208385031215610e7a57610e79610c1d565b5b600083013567ffffffffffffffff811115610e9857610e97610c22565b5b610ea485828601610e0d565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610edb82610eb0565b9050919050565b610eeb81610ed0565b82525050565b6000602082019050610f066000830184610ee2565b92915050565b600060208284031215610f2257610f21610c1d565b5b6000610f3084828501610c3e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f7957610f78610f39565b5b50565b6000819050610f8a82610f68565b919050565b6000610f9a82610f7c565b9050919050565b610faa81610f8f565b82525050565b6000602082019050610fc56000830184610fa1565b92915050565b600080fd5b600067ffffffffffffffff821115610feb57610fea610c69565b5b610ff482610c58565b9050602081019050919050565b82818337600083830152505050565b600061102361101e84610fd0565b610cc9565b90508281526020810184848401111561103f5761103e610fcb565b5b61104a848285611001565b509392505050565b600082601f83011261106757611066610c53565b5b8135611077848260208601611010565b91505092915050565b60006020828403121561109657611095610c1d565b5b600082013567ffffffffffffffff8111156110b4576110b3610c22565b5b6110c084828501611052565b91505092915050565b60008115159050919050565b6110de816110c9565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561111e578082015181840152602081019050611103565b60008484015250505050565b6000611135826110e4565b61113f81856110ef565b935061114f818560208601611100565b61115881610c58565b840191505092915050565b600060408201905061117860008301856110d5565b818103602083015261118a818461112a565b90509392505050565b60006040820190506111a86000830185610ee2565b6111b56020830184610ee2565b9392505050565b60006060820190506111d16000830186610be9565b6111de6020830185610be9565b6111eb6040830184610be9565b949350505050565b6000819050919050565b611206816111f3565b82525050565b600067ffffffffffffffff82169050919050565b6112298161120c565b82525050565b600061ffff82169050919050565b6112468161122f565b82525050565b600063ffffffff82169050919050565b6112658161124c565b82525050565b600060a08201905061128060008301886111fd565b61128d6020830187611220565b61129a604083018661123d565b6112a7606083018561125c565b6112b4608083018461125c565b9695505050505050565b6000815190506112cd81610c27565b92915050565b6000602082840312156112e9576112e8610c1d565b5b60006112f7848285016112be565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061136982610bdf565b915061137483610bdf565b925082820390508181111561138c5761138b61132f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113cc82610bdf565b91506113d783610bdf565b9250826113e7576113e6611392565b5b828206905092915050565b600081905092915050565b50565b600061140d6000836113f2565b9150611418826113fd565b600082019050919050565b600061142e82611400565b915081905091905056fea2646970667358221220da4b60e5f7f44daaceb771220eab26f1162eb2090f5cb3b1daa431bf80083c3364736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f5780636b68c03c116100595780636b68c03c146102375780636e04ff0d1461026257806391ad27b4146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf57806361b58b46146101fa576100c2565b806309bc33a7146100c75780631fe543e3146100f25780632cfcc5391461011b578063320229eb146101255780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bf8565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610dac565b61031e565b005b6101236103de565b005b34801561013157600080fd5b5061013a61054d565b6040516101479190610bf8565b60405180910390f35b34801561015c57600080fd5b5061017760048036038101906101729190610e63565b610557565b005b34801561018557600080fd5b5061018e610748565b60405161019b9190610ef1565b60405180910390f35b3480156101b057600080fd5b506101b9610771565b6040516101c69190610bf8565b60405180910390f35b3480156101db57600080fd5b506101e4610780565b6040516101f19190610bf8565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610f0c565b61078d565b60405161022e9190610ef1565b60405180910390f35b34801561024357600080fd5b5061024c6107d5565b6040516102599190610fb0565b60405180910390f35b34801561026e57600080fd5b5061028960048036038101906102849190611080565b6107eb565b604051610297929190611163565b60405180910390f35b3480156102ac57600080fd5b506102b56108d2565b6040516102c29190610bf8565b60405180910390f35b3480156102d757600080fd5b506102e06108fa565b6040516102ed9190610bf8565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c7929190611193565b60405180910390fd5b6103da8282610907565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610438576040517fec269fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561044c5761044b610f39565b5b600060149054906101000a900460ff16600181111561046e5761046d610f39565b5b146104a5576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600154905090565b6000610571604051806020016040528060008152506107eb565b509050806105e05747600280549050600060149054906101000a900460ff1660018111156105a2576105a1610f39565b5b6040517ff74a8f1f0000000000000000000000000000000000000000000000000000000081526004016105d7939291906111bc565b60405180910390fd5b6001600060146101000a81548160ff0219169083600181111561060657610605610f39565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106d095949392919061126b565b6020604051808303816000875af11580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071391906112d3565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600282815481106107a3576107a2611300565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060149054906101000a900460ff16905090565b6000606060008060149054906101000a900460ff16600181111561081257610811610f39565b5b6000600181111561082657610825610f39565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006001544261085a919061135e565b1190506000806002805490501190506000804711905083801561087a5750825b80156108835750815b801561088c5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600280549050905090565b60006002805490508260008151811061092357610922611300565b5b602002602001015161093591906113c1565b905060006002828154811061094d5761094c611300565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060146101000a81548160ff021916908360018111156109df576109de610f39565b5b0217905550600067ffffffffffffffff8111156109ff576109fe610c69565b5b604051908082528060200260200182016040528015610a2d5781602001602082028036833780820191505090505b5060029080519060200190610a43929190610b38565b504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a7190611423565b60006040518083038185875af1925050503d8060008114610aae576040519150601f19603f3d011682016040523d82523d6000602084013e610ab3565b606091505b5050905080610aee576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bb1579160200282015b82811115610bb05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b58565b5b509050610bbe9190610bc2565b5090565b5b80821115610bdb576000816000905550600101610bc3565b5090565b6000819050919050565b610bf281610bdf565b82525050565b6000602082019050610c0d6000830184610be9565b92915050565b6000604051905090565b600080fd5b600080fd5b610c3081610bdf565b8114610c3b57600080fd5b50565b600081359050610c4d81610c27565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ca182610c58565b810181811067ffffffffffffffff82111715610cc057610cbf610c69565b5b80604052505050565b6000610cd3610c13565b9050610cdf8282610c98565b919050565b600067ffffffffffffffff821115610cff57610cfe610c69565b5b602082029050602081019050919050565b600080fd5b6000610d28610d2384610ce4565b610cc9565b90508083825260208201905060208402830185811115610d4b57610d4a610d10565b5b835b81811015610d745780610d608882610c3e565b845260208401935050602081019050610d4d565b5050509392505050565b600082601f830112610d9357610d92610c53565b5b8135610da3848260208601610d15565b91505092915050565b60008060408385031215610dc357610dc2610c1d565b5b6000610dd185828601610c3e565b925050602083013567ffffffffffffffff811115610df257610df1610c22565b5b610dfe85828601610d7e565b9150509250929050565b600080fd5b60008083601f840112610e2357610e22610c53565b5b8235905067ffffffffffffffff811115610e4057610e3f610e08565b5b602083019150836001820283011115610e5c57610e5b610d10565b5b9250929050565b60008060208385031215610e7a57610e79610c1d565b5b600083013567ffffffffffffffff811115610e9857610e97610c22565b5b610ea485828601610e0d565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610edb82610eb0565b9050919050565b610eeb81610ed0565b82525050565b6000602082019050610f066000830184610ee2565b92915050565b600060208284031215610f2257610f21610c1d565b5b6000610f3084828501610c3e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f7957610f78610f39565b5b50565b6000819050610f8a82610f68565b919050565b6000610f9a82610f7c565b9050919050565b610faa81610f8f565b82525050565b6000602082019050610fc56000830184610fa1565b92915050565b600080fd5b600067ffffffffffffffff821115610feb57610fea610c69565b5b610ff482610c58565b9050602081019050919050565b82818337600083830152505050565b600061102361101e84610fd0565b610cc9565b90508281526020810184848401111561103f5761103e610fcb565b5b61104a848285611001565b509392505050565b600082601f83011261106757611066610c53565b5b8135611077848260208601611010565b91505092915050565b60006020828403121561109657611095610c1d565b5b600082013567ffffffffffffffff8111156110b4576110b3610c22565b5b6110c084828501611052565b91505092915050565b60008115159050919050565b6110de816110c9565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561111e578082015181840152602081019050611103565b60008484015250505050565b6000611135826110e4565b61113f81856110ef565b935061114f818560208601611100565b61115881610c58565b840191505092915050565b600060408201905061117860008301856110d5565b818103602083015261118a818461112a565b90509392505050565b60006040820190506111a86000830185610ee2565b6111b56020830184610ee2565b9392505050565b60006060820190506111d16000830186610be9565b6111de6020830185610be9565b6111eb6040830184610be9565b949350505050565b6000819050919050565b611206816111f3565b82525050565b600067ffffffffffffffff82169050919050565b6112298161120c565b82525050565b600061ffff82169050919050565b6112468161122f565b82525050565b600063ffffffff82169050919050565b6112658161124c565b82525050565b600060a08201905061128060008301886111fd565b61128d6020830187611220565b61129a604083018661123d565b6112a7606083018561125c565b6112b4608083018461125c565b9695505050505050565b6000815190506112cd81610c27565b92915050565b6000602082840312156112e9576112e8610c1d565b5b60006112f7848285016112be565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061136982610bdf565b915061137483610bdf565b925082820390508181111561138c5761138b61132f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113cc82610bdf565b91506113d783610bdf565b9250826113e7576113e6611392565b5b828206905092915050565b600081905092915050565b50565b600061140d6000836113f2565b9150611418826113fd565b600082019050919050565b600061142e82611400565b915081905091905056fea2646970667358221220da4b60e5f7f44daaceb771220eab26f1162eb2090f5cb3b1daa431bf80083c3364736f6c63430008110033",
  "devdoc": {
    "author": "Martin Atanasov",
    "details": "This smart contract implements Chainlink VRF V2 and Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "in order to pick a new winner, all of the bools below should return true"
      },
      "performUpkeep(bytes)": {
        "details": "calls checkUpkeep and if it returns true, it selects a new winner"
      }
    },
    "title": "Lottery Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 216,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 219,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "0",
        "type": "t_enum(LotteryState)199"
      },
      {
        "astId": 221,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 228,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_participants",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address_payable)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)199": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}